diff --git a/addons-syleam/wms_routing/sale.py b/addons-syleam/wms_routing/sale.py
index d8b452f..d1123f3 100644
--- a/addons-syleam/wms_routing/sale.py
+++ b/addons-syleam/wms_routing/sale.py
@@ -72,6 +72,12 @@ class sale_order(osv.osv):
         # No value found, we return nothing
         return res
 
+    def _prepare_order_picking(self, cr, uid, order, context=None):
+        result = super(sale_order, self)._prepare_order_picking(cr, uid, order, context=context)
+        if order.round_id:
+            result['round_id'] = order.round_id.id
+        return result
+
 sale_order()
 
 # vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:
diff --git a/addons-syleam/wms_routing/stock.py b/addons-syleam/wms_routing/stock.py
index b9888bb..b3383ae 100644
--- a/addons-syleam/wms_routing/stock.py
+++ b/addons-syleam/wms_routing/stock.py
@@ -34,36 +34,28 @@ class stock_picking(osv.osv):
         'round_id': fields.many2one('stock.round', 'Round', help='Round for this picking'),
     }
 
-    def create(self, cr, uid, values, context=None):
-        """
-        Redefine create method to use the round_id field
-        """
-        # If there is no round_id defined, we take this on the other objects
-        if not values.get('round_id', False):
-            # Take the value on the sale order, if there is one
-            if values.get('sale_id', False) and values.get('type', '') == 'out':
-                sale_order_obj = self.pool.get('sale.order')
-                sale_order_data = sale_order_obj.read(cr, uid, values['sale_id'], ['round_id'], context=context)
-                values['round_id'] = sale_order_data and sale_order_data['round_id']and sale_order_data['round_id'][0] or False
-
-        return super(stock_picking, self).create(cr, uid, values, context=context)
-
     def action_confirm(self, cr, uid, ids, context=None):
         """
         Replaces moves dest location according to the round
         """
-        res = super(stock_picking, self).action_confirm(cr, uid, ids, context=context)
         stock_move_obj = self.pool.get('stock.move')
         for picking in self.browse(cr, uid, ids, context=context):
             location_id = False
             # Take the location on the first round we find
             if picking.round_id:
                 location_id = picking.round_id.location_id and picking.round_id.location_id.id or False
-            # If a location was found, replace the location_dest_id of the moves by this one
-            if location_id:
-                move_ids = [move.id for move in picking.move_lines if (picking.round_id.location_id.chained_auto_packing == 'transparent' and picking.round_id.location_id.chained_location_id.id != move.location_dest_id.id)]
-                stock_move_obj.write(cr, uid, move_ids, {'location_dest_id': location_id}, context=context)
-        return res
+                # If a location was found, replace the location_dest_id of the moves by this one
+                if location_id:
+                    move_ids = [move.id for move in picking.move_lines]
+                    stock_move_obj.write(cr, uid, move_ids, {'location_dest_id': location_id}, context=context)
+        return super(stock_picking, self).action_confirm(cr, uid, ids, context=context)
+
+    def copy(self, cr, uid, id, default=None, context=None):
+        if default is None:
+            default = {}
+        default = default.copy()
+        default['round_id'] = False
+        return super(stock_picking, self).copy(cr, uid, id, default, context=context)
 
     def onchange_address_id(self, cr, uid, ids, address_id, round_id, context=None):
         """
@@ -88,62 +80,4 @@ class stock_picking(osv.osv):
 stock_picking()
 
 
-class stock_move(osv.osv):
-    _inherit = 'stock.move'
-
-    def _replace_location(self, cr, uid, picking_id, context=None):
-        """
-        Replaces the location_dest_id in the values dict
-        Replaces the location_id of the move_dest_id in the values dict
-        """
-        location_id = False
-        if picking_id:
-            picking = self.pool.get('stock.picking').browse(cr, uid, picking_id, context=context)
-            if picking.round_id:
-                if picking.round_id.location_id:
-                    # If location is chained, change it
-                    location = self.pool.get('stock.location').chained_location_get(
-                        cr, uid,
-                        picking.round_id.location_id,
-                        picking.address_id and picking.address_id.partner_id,
-                        context=context
-                    )
-                    location_id = location and location[1] == 'transparent' and location[0].id or picking.round_id.location_id.id
-        return location_id
-
-    def create(self, cr, uid, values, context=None):
-        """
-        Replaces location_dest_id by the one from round of the picking
-        """
-        location_id = self._replace_location(cr, uid, values.get('picking_id', False), context=context)
-        if location_id:
-            # Modify the location_dest_id
-            values['location_dest_id'] = location_id
-            # Modify the location_id of the move_dest_id if filled
-            if values.get('move_dest_id', False):
-                self.write(cr, uid, [values['move_dest_id']], {'location_id': location_id}, context=context)
-        return super(stock_move, self).create(cr, uid, values, context=context)
-
-    def write(self, cr, uid, ids, values, context=None):
-        """
-        Replaces location_dest_id by the one from round of the picking
-        """
-        if values.get('picking_id', False):
-            # Retrieve the location_id from the picking
-            location_id = self._replace_location(cr, uid, values.get('picking_id'), context=context)
-            if location_id:
-                # Modify the location_dest_id to write
-                values['location_dest_id'] = location_id
-                # Search for the move_dest_ids to modify
-                move_dest_ids = []
-                if values.get('move_dest_id', False):
-                    move_dest_ids = [values.get('move_dest_id')]
-                else:
-                    stock_move_data = self.read(cr, uid, ids, ['move_dest_id'], context=context)
-                    move_dest_ids = [data['move_dest_id'][0] for data in stock_move_data if data['move_dest_id']]
-                self.write(cr, uid, move_dest_ids, {'location_id': location_id}, context=context)
-        return super(stock_move, self).write(cr, uid, ids, values, context=context)
-
-stock_move()
-
 # vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:
